{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Microsoft Surface\\\\Documents\\\\GitHub\\\\carento\\\\frontend\\\\src\\\\screens\\\\CompanyOrderListScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { Table, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { listOrders } from '../actions/orderActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CompanyOrderListScreen = ({\n  history\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const orderList = useSelector(state => state.orderList);\n  const {\n    loading,\n    error,\n    orders\n  } = orderList;\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    userInfo\n  } = userLogin;\n  useEffect(() => {\n    dispatch(listOrders()); //TODO: add checking if company or not\n\n    /*         if (userInfo && userInfo.isAdmin) {\r\n                dispatch(listOrders())\r\n            } else {\r\n                history.push('/login')\r\n            } */\n  }, [dispatch, history, userInfo]); //TODO: add this inside return\n\n  /*     {loading ? (\r\n          <Loader />\r\n      ) : error ? (\r\n          <Message variant='danger'>{error}</Message>\r\n      ) : ( */\n  //TODO: map through orders inside DB\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Orders\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      responsive: true,\n      className: \"table-sm\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"USER\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"DATE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"TOTAL\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"PAID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"DELIVERED\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CompanyOrderListScreen, \"T22Ya5guJBYtT2WBadWLHdx/0BQ=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = CompanyOrderListScreen;\nexport default CompanyOrderListScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompanyOrderListScreen\");","map":{"version":3,"sources":["C:/Users/Microsoft Surface/Documents/GitHub/carento/frontend/src/screens/CompanyOrderListScreen.js"],"names":["React","useEffect","LinkContainer","Table","Button","useDispatch","useSelector","Message","Loader","listOrders","CompanyOrderListScreen","history","dispatch","orderList","state","loading","error","orders","userLogin","userInfo"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,UAAT,QAA2B,yBAA3B;;;;AAEA,MAAMC,sBAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAAA;;AAE5C,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AAEA,QAAMQ,SAAS,GAAGP,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACD,SAAlB,CAA7B;AACA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA6BJ,SAAnC;AAEA,QAAMK,SAAS,GAAGZ,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACI,SAAlB,CAA7B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAeD,SAArB;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,QAAQ,CAACH,UAAU,EAAX,CAAR,CADY,CAGZ;;AACA;AACR;AACA;AACA;AACA;AACK,GATQ,EASN,CAACG,QAAD,EAAWD,OAAX,EAAoBQ,QAApB,CATM,CAAT,CAV4C,CAqB5C;;AACA;AACJ;AACA;AACA;AACA;AAEI;;AAEA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI,QAAC,KAAD;AAAO,MAAA,OAAO,MAAd;AAAe,MAAA,QAAQ,MAAvB;AAAwB,MAAA,KAAK,MAA7B;AAA8B,MAAA,UAAU,MAAxC;AAAyC,MAAA,SAAS,EAAC,UAAnD;AAAA,8BACI;AAAA,+BACI;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANJ,eAOI;AAAA;AAAA;AAAA;AAAA,kBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAYI;AAAA;AAAA;AAAA;AAAA,cAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA,kBADJ;AAkDH,CAhFD;;GAAMT,sB;UAEeL,W,EAECC,W,EAGAA,W;;;KAPhBI,sB;AAkFN,eAAeA,sBAAf","sourcesContent":["import React, { useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Table, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { listOrders } from '../actions/orderActions'\r\n\r\nconst CompanyOrderListScreen = ({ history }) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const orderList = useSelector((state) => state.orderList)\r\n    const { loading, error, orders } = orderList\r\n\r\n    const userLogin = useSelector((state) => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    useEffect(() => {\r\n        dispatch(listOrders())\r\n\r\n        //TODO: add checking if company or not\r\n        /*         if (userInfo && userInfo.isAdmin) {\r\n                    dispatch(listOrders())\r\n                } else {\r\n                    history.push('/login')\r\n                } */\r\n    }, [dispatch, history, userInfo])\r\n\r\n    //TODO: add this inside return\r\n    /*     {loading ? (\r\n            <Loader />\r\n        ) : error ? (\r\n            <Message variant='danger'>{error}</Message>\r\n        ) : ( */\r\n\r\n    //TODO: map through orders inside DB\r\n\r\n    return (\r\n        <>\r\n            <h1>Orders</h1>\r\n\r\n            <Table striped bordered hover responsive className='table-sm'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>ID</th>\r\n                        <th>USER</th>\r\n                        <th>DATE</th>\r\n                        <th>TOTAL</th>\r\n                        <th>PAID</th>\r\n                        <th>DELIVERED</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {/*                     <tr key={order._id}>\r\n                        <td>{order._id}</td>\r\n                        <td>{order.user && order.user.name}</td>\r\n                        <td>{order.createdAt.substring(0, 10)}</td>\r\n                        <td>${order.totalPrice}</td>\r\n                        <td>\r\n                            {order.isPaid ? (\r\n                                order.paidAt.substring(0, 10)\r\n                            ) : (\r\n                                    <i className='fas fa-times' style={{ color: 'red' }}></i>\r\n                                )}\r\n                        </td>\r\n                        <td>\r\n                            {order.isDelivered ? (\r\n                                order.deliveredAt.substring(0, 10)\r\n                            ) : (\r\n                                    <i className='fas fa-times' style={{ color: 'red' }}></i>\r\n                                )}\r\n                        </td>\r\n                        <td>\r\n                            <LinkContainer to={`/order/${order._id}`}>\r\n                                <Button variant='light' className='btn-sm'>\r\n                                    Details\r\n                                </Button>\r\n                            </LinkContainer>\r\n                        </td>\r\n                    </tr> */}\r\n\r\n                </tbody>\r\n            </Table>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CompanyOrderListScreen"]},"metadata":{},"sourceType":"module"}