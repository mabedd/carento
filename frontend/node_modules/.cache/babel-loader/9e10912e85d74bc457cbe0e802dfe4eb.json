{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer, userListReducer, userDeleteReducer, userUpdateReducer } from './reducers/userReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer, orderListReducer } from './reducers/orderReducers';\nimport { carListReducer, carDeleteReducer, carDetailsReducer, carCreateReducer, carUpdateReducer } from './reducers/carReducers';\nconst reducer = combineReducers({\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  //company reducers\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n  userUpdate: userUpdateReducer,\n  carList: carListReducer,\n  carDetails: carDetailsReducer,\n  carDelete: carDeleteReducer,\n  carCreate: carCreateReducer,\n  carUpdate: carUpdateReducer,\n  cart: cartReducer,\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailsReducer,\n  orderPay: orderPayReducer,\n  orderList: orderListReducer\n}); //user inital state\n\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null; //all in all states\n\nconst initialState = {\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["C:/Users/Microsoft Surface/Documents/GitHub/carento/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","userLoginReducer","userRegisterReducer","userDetailsReducer","userUpdateProfileReducer","userListReducer","userDeleteReducer","userUpdateReducer","cartReducer","orderCreateReducer","orderDetailsReducer","orderPayReducer","orderListReducer","carListReducer","carDeleteReducer","carDetailsReducer","carCreateReducer","carUpdateReducer","reducer","userLogin","userRegister","userDetails","userUpdateProfile","userList","userDelete","userUpdate","carList","carDetails","carDelete","carCreate","carUpdate","cart","orderCreate","orderDetails","orderPay","orderList","userInfoFromStorage","localStorage","getItem","JSON","parse","initialState","userInfo","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,SAASC,gBAAT,EAA2BC,mBAA3B,EAAgDC,kBAAhD,EAAoEC,wBAApE,EAA8FC,eAA9F,EAA+GC,iBAA/G,EAAkIC,iBAAlI,QAA2J,yBAA3J;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,kBAAT,EAA6BC,mBAA7B,EAAkDC,eAAlD,EAAmEC,gBAAnE,QAA2F,0BAA3F;AACA,SAASC,cAAT,EAAyBC,gBAAzB,EAA2CC,iBAA3C,EAA8DC,gBAA9D,EAAgFC,gBAAhF,QAAwG,wBAAxG;AAEA,MAAMC,OAAO,GAAGrB,eAAe,CAAC;AAC5BsB,EAAAA,SAAS,EAAElB,gBADiB;AAE5BmB,EAAAA,YAAY,EAAElB,mBAFc;AAG5BmB,EAAAA,WAAW,EAAElB,kBAHe;AAI5BmB,EAAAA,iBAAiB,EAAElB,wBAJS;AAK5B;AACAmB,EAAAA,QAAQ,EAAElB,eANkB;AAO5BmB,EAAAA,UAAU,EAAElB,iBAPgB;AAQ5BmB,EAAAA,UAAU,EAAElB,iBARgB;AAU5BmB,EAAAA,OAAO,EAAEb,cAVmB;AAW5Bc,EAAAA,UAAU,EAAEZ,iBAXgB;AAY5Ba,EAAAA,SAAS,EAAEd,gBAZiB;AAa5Be,EAAAA,SAAS,EAAEb,gBAbiB;AAc5Bc,EAAAA,SAAS,EAAEb,gBAdiB;AAgB5Bc,EAAAA,IAAI,EAAEvB,WAhBsB;AAkB5BwB,EAAAA,WAAW,EAAEvB,kBAlBe;AAmB5BwB,EAAAA,YAAY,EAAEvB,mBAnBc;AAoB5BwB,EAAAA,QAAQ,EAAEvB,eApBkB;AAqB5BwB,EAAAA,SAAS,EAAEvB;AArBiB,CAAD,CAA/B,C,CAwBA;;AACA,MAAMwB,mBAAmB,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,IACtBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADsB,GACyB,IADrD,C,CAGA;;AACA,MAAMG,YAAY,GAAG;AACjBtB,EAAAA,SAAS,EAAE;AAAEuB,IAAAA,QAAQ,EAAEN;AAAZ;AADM,CAArB;AAIA,MAAMO,UAAU,GAAG,CAAC5C,KAAD,CAAnB;AAEA,MAAM6C,KAAK,GAAGhD,WAAW,CAACsB,OAAD,EAAUuB,YAAV,EAAwBzC,mBAAmB,CAACF,eAAe,CAAC,GAAG6C,UAAJ,CAAhB,CAA3C,CAAzB;AAEA,eAAeC,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer, userListReducer, userDeleteReducer, userUpdateReducer } from './reducers/userReducers'\r\nimport { cartReducer } from './reducers/cartReducers'\r\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer, orderListReducer } from './reducers/orderReducers'\r\nimport { carListReducer, carDeleteReducer, carDetailsReducer, carCreateReducer, carUpdateReducer } from './reducers/carReducers'\r\n\r\nconst reducer = combineReducers({\r\n    userLogin: userLoginReducer,\r\n    userRegister: userRegisterReducer,\r\n    userDetails: userDetailsReducer,\r\n    userUpdateProfile: userUpdateProfileReducer,\r\n    //company reducers\r\n    userList: userListReducer,\r\n    userDelete: userDeleteReducer,\r\n    userUpdate: userUpdateReducer,\r\n\r\n    carList: carListReducer,\r\n    carDetails: carDetailsReducer,\r\n    carDelete: carDeleteReducer,\r\n    carCreate: carCreateReducer,\r\n    carUpdate: carUpdateReducer,\r\n\r\n    cart: cartReducer,\r\n\r\n    orderCreate: orderCreateReducer,\r\n    orderDetails: orderDetailsReducer,\r\n    orderPay: orderPayReducer,\r\n    orderList: orderListReducer,\r\n})\r\n\r\n//user inital state\r\nconst userInfoFromStorage = localStorage.getItem('userInfo')\r\n    ? JSON.parse(localStorage.getItem('userInfo')) : null\r\n\r\n//all in all states\r\nconst initialState = {\r\n    userLogin: { userInfo: userInfoFromStorage },\r\n}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)))\r\n\r\nexport default store"]},"metadata":{},"sourceType":"module"}