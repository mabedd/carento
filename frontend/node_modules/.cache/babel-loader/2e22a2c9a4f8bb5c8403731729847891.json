{"ast":null,"code":"import axios from 'axios';\nimport { logout } from './userActions';\nimport { CAR_LIST_REQUEST, CAR_LIST_SUCCESS, CAR_LIST_FAIL, CAR_DETAILS_REQUEST, CAR_DETAILS_SUCCESS, CAR_DETAILS_FAIL, CAR_DELETE_FAIL, CAR_DELETE_SUCCESS, CAR_DELETE_REQUEST, CAR_CREATE_FAIL, CAR_CREATE_REQUEST, CAR_CREATE_RESET, CAR_CREATE_SUCCESS, CAR_UPDATE_REQUEST, CAR_UPDATE_SUCCESS, CAR_UPDATE_FAIL, CAR_UPDATE_RESET } from '../constants/carConstants';\nexport const listCars = (keyword = '', pageNumber = '') => async (dispatch) => {\n  try {\n    dispatch({\n      type: CAR_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/cars?keyword=${keyword}&pageNumber=${pageNumber}`);\n    dispatch({\n      type: CAR_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: CAR_LIST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const listCarDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: CAR_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/cars/${id}`);\n    dispatch({\n      type: CAR_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: CAR_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deleteCar = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CAR_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.delete(`/api/cars/${id}`, config);\n    dispatch({\n      type: CAR_DELETE_SUCCESS\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: CAR_DELETE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const createCar = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CAR_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/cars`, {}, config);\n    dispatch({\n      type: CAR_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: CAR_CREATE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const updateCar = car => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: CAR_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    }; //TODO: check\n\n    const {\n      data\n    } = await axios.put(`/api/cars/${car.plate}`, car, config);\n    dispatch({\n      type: CAR_UPDATE_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: CAR_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: CAR_UPDATE_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Microsoft Surface/Documents/GitHub/carento/frontend/src/actions/carActions.js"],"names":["axios","logout","CAR_LIST_REQUEST","CAR_LIST_SUCCESS","CAR_LIST_FAIL","CAR_DETAILS_REQUEST","CAR_DETAILS_SUCCESS","CAR_DETAILS_FAIL","CAR_DELETE_FAIL","CAR_DELETE_SUCCESS","CAR_DELETE_REQUEST","CAR_CREATE_FAIL","CAR_CREATE_REQUEST","CAR_CREATE_RESET","CAR_CREATE_SUCCESS","CAR_UPDATE_REQUEST","CAR_UPDATE_SUCCESS","CAR_UPDATE_FAIL","CAR_UPDATE_RESET","listCars","keyword","pageNumber","dispatch","type","data","get","payload","error","response","message","listCarDetails","id","deleteCar","getState","userLogin","userInfo","config","headers","Authorization","token","delete","createCar","post","updateCar","car","put","plate"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\n\r\nimport { logout } from './userActions'\r\nimport {\r\n    CAR_LIST_REQUEST, CAR_LIST_SUCCESS, CAR_LIST_FAIL,\r\n    CAR_DETAILS_REQUEST, CAR_DETAILS_SUCCESS, CAR_DETAILS_FAIL,\r\n    CAR_DELETE_FAIL, CAR_DELETE_SUCCESS, CAR_DELETE_REQUEST,\r\n    CAR_CREATE_FAIL, CAR_CREATE_REQUEST, CAR_CREATE_RESET, CAR_CREATE_SUCCESS,\r\n    CAR_UPDATE_REQUEST, CAR_UPDATE_SUCCESS, CAR_UPDATE_FAIL, CAR_UPDATE_RESET,\r\n} from '../constants/carConstants'\r\n\r\n\r\nexport const listCars = (keyword = '', pageNumber = '') => async (\r\n    dispatch\r\n) => {\r\n    try {\r\n        dispatch({ type: CAR_LIST_REQUEST })\r\n\r\n        const { data } = await axios.get(\r\n            `/api/cars?keyword=${keyword}&pageNumber=${pageNumber}`\r\n        )\r\n\r\n        dispatch({\r\n            type: CAR_LIST_SUCCESS,\r\n            payload: data,\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: CAR_LIST_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const listCarDetails = (id) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: CAR_DETAILS_REQUEST })\r\n\r\n        const { data } = await axios.get(`/api/cars/${id}`)\r\n\r\n        dispatch({\r\n            type: CAR_DETAILS_SUCCESS,\r\n            payload: data,\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: CAR_DETAILS_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const deleteCar = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: CAR_DELETE_REQUEST,\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n\r\n        await axios.delete(`/api/cars/${id}`, config)\r\n\r\n        dispatch({\r\n            type: CAR_DELETE_SUCCESS,\r\n        })\r\n    } catch (error) {\r\n        const message =\r\n            error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        if (message === 'Not authorized, token failed') {\r\n            dispatch(logout())\r\n        }\r\n        dispatch({\r\n            type: CAR_DELETE_FAIL,\r\n            payload: message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const createCar = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: CAR_CREATE_REQUEST,\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n\r\n        const { data } = await axios.post(`/api/cars`, {}, config)\r\n\r\n        dispatch({\r\n            type: CAR_CREATE_SUCCESS,\r\n            payload: data,\r\n        })\r\n    } catch (error) {\r\n        const message =\r\n            error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        if (message === 'Not authorized, token failed') {\r\n            dispatch(logout())\r\n        }\r\n        dispatch({\r\n            type: CAR_CREATE_FAIL,\r\n            payload: message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateCar = (car) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: CAR_UPDATE_REQUEST,\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n\r\n        //TODO: check\r\n        const { data } = await axios.put(\r\n            `/api/cars/${car.plate}`,\r\n            car,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: CAR_UPDATE_SUCCESS,\r\n            payload: data,\r\n        })\r\n        dispatch({ type: CAR_DETAILS_SUCCESS, payload: data })\r\n    } catch (error) {\r\n        const message =\r\n            error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        if (message === 'Not authorized, token failed') {\r\n            dispatch(logout())\r\n        }\r\n        dispatch({\r\n            type: CAR_UPDATE_FAIL,\r\n            payload: message,\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}