{"ast":null,"code":"import axios from 'axios';\nimport { USER_DETAILS_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_RESET, USER_LIST_FAIL, USER_LIST_REQUEST, USER_LIST_SUCCESS, USER_LIST_RESET, USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_UPDATE_PROFILE_FAIL, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS, USER_DELETE_REQUEST, USER_DELETE_SUCCESS, USER_DELETE_FAIL, USER_UPDATE_SUCCESS, USER_UPDATE_FAIL, USER_UPDATE_REQUEST } from '../constants/userConstants';\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    }); //config for sending requests\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; //make request\n\n    const {\n      data\n    } = await axios.post('/api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    }); //users local storage\n\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      //send error message in case of failuer\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n  dispatch({\n    type: USER_DETAILS_RESET\n  });\n  dispatch({\n    type: USER_LIST_RESET\n  });\n  document.location.href = '/login';\n};\nexport const register = (name, nationalID, pnum, email, password, dob) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    }); //config for sending requests\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; //make request\n\n    const {\n      data\n    } = await axios.post('/api/users/', {\n      name,\n      nationalID,\n      pnum,\n      email,\n      password,\n      dob\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    }); //login user after successful registeration\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    }); //users local storage\n\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      //send error message in case of failuer\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getUserDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    }); //access logged in user\n\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //pass auth token\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    }; //get request to user profile\n\n    const {\n      data\n    } = await axios.get(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    //send error message and logout user\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: message\n    });\n  }\n};\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST\n    }); //access logged in user\n\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState(); //pass auth token\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    }; //put request to user profile\n\n    const {\n      data\n    } = await axios.put(`/api/users/profile`, user, config);\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    }); //save to storage\n\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: message\n    });\n  }\n};\n/******************************************* */\n\n/**COMPANY ACTIONS */\n//!! after registeration, company will be inserted to DB with pending status awaitng for manual approval\n\nexport const companyRegister = (name, email, contactnum, address, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    }); //config for sending requests\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; //make request\n\n    const {\n      data\n    } = await axios.post('/api/companies/', {\n      name,\n      email,\n      contactnum,\n      address,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    }); //login user after successful registeration\n\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    }); //users local storage\n\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      //send error message in case of failuer\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const listUsers = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_LIST_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users`, config);\n    dispatch({\n      type: USER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload: message\n    });\n  }\n};\nexport const deleteUser = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.delete(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DELETE_SUCCESS\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: USER_DELETE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const updateUser = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/users/${user._id}`, user, config);\n    dispatch({\n      type: USER_UPDATE_SUCCESS\n    });\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_DETAILS_RESET\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Microsoft Surface/Documents/GitHub/carento/frontend/src/actions/userActions.js"],"names":["axios","USER_DETAILS_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_RESET","USER_LIST_FAIL","USER_LIST_REQUEST","USER_LIST_SUCCESS","USER_LIST_RESET","USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_UPDATE_PROFILE_FAIL","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_DELETE_REQUEST","USER_DELETE_SUCCESS","USER_DELETE_FAIL","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","USER_UPDATE_REQUEST","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","document","location","href","register","name","nationalID","pnum","dob","getUserDetails","id","getState","userLogin","userInfo","Authorization","token","get","updateUserProfile","user","put","companyRegister","contactnum","address","listUsers","deleteUser","delete","updateUser","_id"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport {\r\n    USER_DETAILS_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_RESET,\r\n    USER_LIST_FAIL, USER_LIST_REQUEST, USER_LIST_SUCCESS, USER_LIST_RESET,\r\n    USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT,\r\n    USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS,\r\n    USER_UPDATE_PROFILE_FAIL, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS,\r\n    USER_DELETE_REQUEST, USER_DELETE_SUCCESS, USER_DELETE_FAIL,\r\n    USER_UPDATE_SUCCESS, USER_UPDATE_FAIL, USER_UPDATE_REQUEST\r\n} from '../constants/userConstants'\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LOGIN_REQUEST\r\n        })\r\n\r\n        //config for sending requests\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        //make request\r\n        const { data } = await axios.post('/api/users/login', { email, password }, config)\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        //users local storage\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch (error) {\r\n        dispatch({//send error message in case of failuer\r\n            type: USER_LOGIN_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n    localStorage.removeItem('userInfo')\r\n\r\n    dispatch({ type: USER_LOGOUT })\r\n    dispatch({ type: USER_DETAILS_RESET })\r\n    dispatch({ type: USER_LIST_RESET })\r\n\r\n    document.location.href = '/login'\r\n}\r\n\r\nexport const register = (name, nationalID, pnum, email, password, dob) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_REGISTER_REQUEST\r\n        })\r\n\r\n        //config for sending requests\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        //make request\r\n        const { data } = await axios.post('/api/users/', { name, nationalID, pnum, email, password, dob }, config)\r\n\r\n        dispatch({\r\n            type: USER_REGISTER_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        //login user after successful registeration\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        //users local storage\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch (error) {\r\n        dispatch({//send error message in case of failuer\r\n            type: USER_REGISTER_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_DETAILS_REQUEST,\r\n        })\r\n\r\n        //access logged in user\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        //pass auth token\r\n        const config = {\r\n            headers: {\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n\r\n        //get request to user profile\r\n        const { data } = await axios.get(`/api/users/${id}`, config)\r\n\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n    } catch (error) { //send error message and logout user\r\n        const message =\r\n            error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        if (message === 'Not authorized, token failed') {\r\n            dispatch(logout())\r\n        }\r\n        dispatch({\r\n            type: USER_DETAILS_FAIL,\r\n            payload: message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_REQUEST,\r\n        })\r\n\r\n        //access logged in user\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        //pass auth token\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n\r\n        //put request to user profile\r\n        const { data } = await axios.put(`/api/users/profile`, user, config)\r\n\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_SUCCESS,\r\n            payload: data,\r\n        })\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data,\r\n        })\r\n        //save to storage\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch (error) {\r\n        const message =\r\n            error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        if (message === 'Not authorized, token failed') {\r\n            dispatch(logout())\r\n        }\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_FAIL,\r\n            payload: message,\r\n        })\r\n    }\r\n}\r\n\r\n/******************************************* */\r\n/**COMPANY ACTIONS */\r\n\r\n//!! after registeration, company will be inserted to DB with pending status awaitng for manual approval\r\nexport const companyRegister = (name, email, contactnum, address, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_REGISTER_REQUEST\r\n        })\r\n\r\n        //config for sending requests\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        //make request\r\n        const { data } = await axios.post('/api/companies/', { name, email, contactnum, address, password }, config)\r\n\r\n        dispatch({\r\n            type: USER_REGISTER_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        //login user after successful registeration\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        //users local storage\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch (error) {\r\n        dispatch({//send error message in case of failuer\r\n            type: USER_REGISTER_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const listUsers = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LIST_REQUEST,\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n\r\n        const { data } = await axios.get(`/api/users`, config)\r\n\r\n        dispatch({\r\n            type: USER_LIST_SUCCESS,\r\n            payload: data,\r\n        })\r\n    } catch (error) {\r\n        const message =\r\n            error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        if (message === 'Not authorized, token failed') {\r\n            dispatch(logout())\r\n        }\r\n        dispatch({\r\n            type: USER_LIST_FAIL,\r\n            payload: message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const deleteUser = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_DELETE_REQUEST,\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n\r\n        await axios.delete(`/api/users/${id}`, config)\r\n\r\n        dispatch({ type: USER_DELETE_SUCCESS })\r\n    } catch (error) {\r\n        const message =\r\n            error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        if (message === 'Not authorized, token failed') {\r\n            dispatch(logout())\r\n        }\r\n        dispatch({\r\n            type: USER_DELETE_FAIL,\r\n            payload: message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_REQUEST,\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`,\r\n            },\r\n        }\r\n\r\n        const { data } = await axios.put(`/api/users/${user._id}`, user, config)\r\n\r\n        dispatch({ type: USER_UPDATE_SUCCESS })\r\n\r\n        dispatch({ type: USER_DETAILS_SUCCESS, payload: data })\r\n\r\n        dispatch({ type: USER_DETAILS_RESET })\r\n    } catch (error) {\r\n        const message =\r\n            error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        if (message === 'Not authorized, token failed') {\r\n            dispatch(logout())\r\n        }\r\n        dispatch({\r\n            type: USER_UPDATE_FAIL,\r\n            payload: message,\r\n        })\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}